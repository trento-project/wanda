name: CI

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:
  repository_dispatch:
    types: [start-ci]

env:
  ELIXIR_VERSION: 1.14.3
  OTP_VERSION: 25
  MIX_ENV: test

jobs:
  elixir-deps:
    name: Elixir dependencies (Elixir ${{ matrix.elixir }}, OTP ${{ matrix.otp }})
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - elixir: 1.14.3
            otp: 25
          - elixir: 1.13.4
            otp: 22
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
        env:
          ImageOS: ubuntu20
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Install Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile --warnings-as-errors
          mix dialyzer --plt

  tlint:
    name: Lint checks
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/trento-project/tlint:latest
      volumes:
        - ${{ github.workspace }}:/data
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run TLint
        run: "/home/tlint/tlint lint -f /data/priv/catalog"

  static-code-analysis:
    name: Static Code Analysis
    needs: elixir-deps
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
        env:
          ImageOS: ubuntu20

      - name: Retrieve Elixir Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Check for Unused Dependencies
        run: mix deps.unlock --check-unused
      - name: Check Code Format
        run: mix format --check-formatted
      - name: Run Credo
        run: mix credo --strict
      - name: Run Dialyzer
        run: mix dialyzer

  test:
    name: Test (Elixir ${{ matrix.elixir }}, OTP ${{ matrix.otp }})
    needs: elixir-deps
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - elixir: 1.14.3
            otp: 25
          - elixir: 1.13.4
            otp: 22
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wanda_test
        ports:
          - 5434:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq
        env:
          RABBITMQ_DEFAULT_USER: wanda
          RABBITMQ_DEFAULT_PASS: wanda
        ports:
          - 5674:5672
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Run test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mix coveralls.github --color --trace

  build-and-push-container-images:
    name: Build and push container images
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch'
    needs: [static-code-analysis, test]
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_REPOSITORY: ghcr.io/${{ github.repository_owner }}/trento-wanda
      IMAGE_TAG: "${{ (github.event_name == 'release' && github.event.release.tag_name) || (github.event_name == 'push' && github.ref_name == 'main' && 'rolling') || github.sha }}"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: ${{ env.IMAGE_REPOSITORY }}
      - name: Build and push container image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-demo-img:
    name: Build the docker image for the demo environment
    runs-on: ubuntu-20.04
    if: vars.DEPLOY_DEMO == 'true' && (github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch')
    needs: [static-code-analysis, test]
    permissions:
      contents: read
      packages: write
    env:
      MIX_ENV: demo
      REGISTRY: ghcr.io
      IMAGE_REPOSITORY: ghcr.io/${{ github.repository_owner }}/trento-wanda
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v2
      - name: Log in to the Container registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: ${{ env.IMAGE_REPOSITORY }}
      - name: Build and push container image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ env.MIX_ENV }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: MIX_ENV=${{ env.MIX_ENV }}
      - name: Remotely trigger trento-web demo deployment
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository_owner }}/web
          event-type: deploy-demo

  generate-docs:
    name: Generate project documentation
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      - name: Retrieve Cached Dependencies
        uses: actions/cache@v3
        id: mix-cache
        with:
          path: |
            deps
            _build/test
            priv/plts
          key: ${{ runner.os }}-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('mix.lock') }}
      - name: Build docs
        uses: lee-dohm/generate-elixir-docs@v1
      - name: Generate openapi.json
        run: mix openapi.spec.json --start-app=false --spec WandaWeb.ApiSpec
      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: ./doc/swaggerui
          spec-file: openapi.json
      - name: Publish to Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc

  obs-commit:
    name: Commit the project on OBS
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch'
    needs: [static-code-analysis, test]
    container:
      image: ghcr.io/trento-project/continuous-delivery:main
      env:
        GITHUB_OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEST_FOLDER: "/tmp/osc_project"
        NAME: trento-wanda-image
        OBS_USER: ${{ secrets.OBS_USER }}
        OBS_PASS: ${{ secrets.OBS_PASS }}
        OBS_PROJECT: ${{ secrets.OBS_PROJECT }}
        FOLDER: packaging/suse
        REPOSITORY: ${{ github.repository }}
      options: -u 0:0
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: latest-tag
        with:
          semver_only: true
          initial_version: 0.0.1
      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.66
      - name: Get mix deps
        run: mix local.hex --force && mix local.rebar --force && mix deps.clean --all && mix deps.get
      - name: cargo vendor
        run: |
          cd deps/rhai_rustler/native/rhai_rustler
          cargo vendor
          printf '\n\n[source.crates-io]\nreplace-with = "vendored-sources"\n\n[source.vendored-sources]\ndirectory = "vendor"\n' >> .cargo/config
      - name: Configure OSC
        # OSC credentials must be configured beforehand as the HOME variables cannot be changed from /github/home
        # that is used to run osc commands
        run: |
          mkdir -p $HOME/.config/osc
          cp /home/osc/.config/osc/oscrc $HOME/.config/osc
          /scripts/init_osc_creds.sh
      - name: Prepare .changes file
        # The .changes file is updated only in release creation. This current task should be improved
        # in order to add the current rolling release notes
        if: github.event_name == 'release'
        run: |
          CHANGES_FILE=$NAME.changes
          osc checkout $OBS_PROJECT $NAME $CHANGES_FILE
          mv $CHANGES_FILE $FOLDER
          VERSION=${{ steps.latest-tag.outputs.tag }}
          hack/gh_release_to_obs_changeset.py $REPOSITORY -a shap-staff@suse.de -t $VERSION -f $FOLDER/$CHANGES_FILE
      - name: Set version
        run: |
          git config --global --add safe.directory /__w/wanda/wanda
          VERSION=$(./hack/get_version_from_git.sh)
          # "+" character is not allowed in OBS dockerfile version strings
          VERSION=${VERSION//[+]/-}
          sed -i 's~%%VERSION%%~'"${VERSION}"'~' packaging/suse/Dockerfile
      - name: Commit on OBS
        run: |
          OBS_PACKAGE=$OBS_PROJECT/$NAME
          osc checkout $OBS_PACKAGE -o $DEST_FOLDER
          cp -r packaging/suse/* $DEST_FOLDER
          tar --transform 's,^./,/wanda/,' -zcvf $DEST_FOLDER/wanda.tar.gz --exclude=./.git ./*
          cd $DEST_FOLDER
          osc ar
          osc commit -m "New development version of $NAME released"
