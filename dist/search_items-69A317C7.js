searchNodes=[{"doc":"This module defines the setup for tests requiring access to the application's data layer. You may define functions here to be used as helpers in your tests. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use Wanda.DataCase, async: true , although this option is not recommended for other databases.","ref":"Wanda.DataCase.html","title":"Wanda.DataCase","type":"module"},{"doc":"A helper that transforms changeset errors into a map of messages. assert { :error , changeset } = Accounts . create_user ( %{ password : &quot;short&quot; } ) assert &quot;password is too short&quot; in errors_on ( changeset ) . password assert %{ password : [ &quot;password is too short&quot; ] } = errors_on ( changeset )","ref":"Wanda.DataCase.html#errors_on/1","title":"Wanda.DataCase.errors_on/1","type":"function"},{"doc":"Sets up the sandbox based on the test tags.","ref":"Wanda.DataCase.html#setup_sandbox/1","title":"Wanda.DataCase.setup_sandbox/1","type":"function"},{"doc":"Handles integration events.","ref":"Wanda.Policy.html","title":"Wanda.Policy","type":"module"},{"doc":"","ref":"Wanda.Policy.html#handle_event/1","title":"Wanda.Policy.handle_event/1","type":"function"},{"doc":"Used for executing DB release tasks when run in production without Mix installed.","ref":"Wanda.Release.html","title":"Wanda.Release","type":"module"},{"doc":"","ref":"Wanda.Release.html#init/0","title":"Wanda.Release.init/0","type":"function"},{"doc":"","ref":"Wanda.Release.html#migrate/0","title":"Wanda.Release.migrate/0","type":"function"},{"doc":"","ref":"Wanda.Release.html#rollback/2","title":"Wanda.Release.rollback/2","type":"function"},{"doc":"","ref":"Wanda.Repo.html","title":"Wanda.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"Wanda.Repo.html#aggregate/3","title":"Wanda.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"Wanda.Repo.html#aggregate/4","title":"Wanda.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"Wanda.Repo.html#all/2","title":"Wanda.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"Wanda.Repo.html#checked_out?/0","title":"Wanda.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"Wanda.Repo.html#checkout/2","title":"Wanda.Repo.checkout/2","type":"function"},{"doc":"","ref":"Wanda.Repo.html#child_spec/1","title":"Wanda.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"Wanda.Repo.html#config/0","title":"Wanda.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"Wanda.Repo.html#default_options/1","title":"Wanda.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"Wanda.Repo.html#delete/2","title":"Wanda.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"Wanda.Repo.html#delete!/2","title":"Wanda.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"Wanda.Repo.html#delete_all/2","title":"Wanda.Repo.delete_all/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"Wanda.Repo.html#disconnect_all/2","title":"Wanda.Repo.disconnect_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"Wanda.Repo.html#exists?/2","title":"Wanda.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"Wanda.Repo.html#explain/3","title":"Wanda.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"Wanda.Repo.html#get/3","title":"Wanda.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"Wanda.Repo.html#get!/3","title":"Wanda.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"Wanda.Repo.html#get_by/3","title":"Wanda.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"Wanda.Repo.html#get_by!/3","title":"Wanda.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"Wanda.Repo.html#get_dynamic_repo/0","title":"Wanda.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"Wanda.Repo.html#in_transaction?/0","title":"Wanda.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"Wanda.Repo.html#insert/2","title":"Wanda.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"Wanda.Repo.html#insert!/2","title":"Wanda.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"Wanda.Repo.html#insert_all/3","title":"Wanda.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"Wanda.Repo.html#insert_or_update/2","title":"Wanda.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"Wanda.Repo.html#insert_or_update!/2","title":"Wanda.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"Wanda.Repo.html#load/2","title":"Wanda.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"Wanda.Repo.html#one/2","title":"Wanda.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"Wanda.Repo.html#one!/2","title":"Wanda.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"Wanda.Repo.html#preload/3","title":"Wanda.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"Wanda.Repo.html#prepare_query/3","title":"Wanda.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"Wanda.Repo.html#put_dynamic_repo/1","title":"Wanda.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Wanda.Repo.html#query/3","title":"Wanda.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Wanda.Repo.html#query!/3","title":"Wanda.Repo.query!/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"Wanda.Repo.html#query_many/3","title":"Wanda.Repo.query_many/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"Wanda.Repo.html#query_many!/3","title":"Wanda.Repo.query_many!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"Wanda.Repo.html#reload/2","title":"Wanda.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"Wanda.Repo.html#reload!/2","title":"Wanda.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"Wanda.Repo.html#rollback/1","title":"Wanda.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"Wanda.Repo.html#start_link/1","title":"Wanda.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"Wanda.Repo.html#stop/1","title":"Wanda.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"Wanda.Repo.html#stream/2","title":"Wanda.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Wanda.Repo.html#to_sql/2","title":"Wanda.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"Wanda.Repo.html#transaction/2","title":"Wanda.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"Wanda.Repo.html#update/2","title":"Wanda.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"Wanda.Repo.html#update!/2","title":"Wanda.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"Wanda.Repo.html#update_all/3","title":"Wanda.Repo.update_all/3","type":"function"},{"doc":"This module exposes functionalities to interact with the historycal log of executions.","ref":"Wanda.Executions.html","title":"Wanda.Executions","type":"module"},{"doc":"Marks a previously started execution as completed","ref":"Wanda.Executions.html#complete_execution!/2","title":"Wanda.Executions.complete_execution!/2","type":"function"},{"doc":"Counts executions in the database.","ref":"Wanda.Executions.html#count_executions/1","title":"Wanda.Executions.count_executions/1","type":"function"},{"doc":"Create a new execution. If the execution already exists, it will be returned.","ref":"Wanda.Executions.html#create_execution!/3","title":"Wanda.Executions.create_execution!/3","type":"function"},{"doc":"Get a result by execution_id.","ref":"Wanda.Executions.html#get_execution!/1","title":"Wanda.Executions.get_execution!/1","type":"function"},{"doc":"Get a paginated list of executions. Can be filtered by group_id.","ref":"Wanda.Executions.html#list_executions/1","title":"Wanda.Executions.list_executions/1","type":"function"},{"doc":"Represents the result of a check on a specific agent.","ref":"Wanda.Executions.AgentCheckError.html","title":"Wanda.Executions.AgentCheckError","type":"module"},{"doc":"","ref":"Wanda.Executions.AgentCheckError.html#t:t/0","title":"Wanda.Executions.AgentCheckError.t/0","type":"type"},{"doc":"Represents the result of a check on a specific agent.","ref":"Wanda.Executions.AgentCheckResult.html","title":"Wanda.Executions.AgentCheckResult","type":"module"},{"doc":"","ref":"Wanda.Executions.AgentCheckResult.html#t:t/0","title":"Wanda.Executions.AgentCheckResult.t/0","type":"type"},{"doc":"Represents the result of a check.","ref":"Wanda.Executions.CheckResult.html","title":"Wanda.Executions.CheckResult","type":"module"},{"doc":"","ref":"Wanda.Executions.CheckResult.html#t:t/0","title":"Wanda.Executions.CheckResult.t/0","type":"type"},{"doc":"Evaluation functional core.","ref":"Wanda.Executions.Evaluation.html","title":"Wanda.Executions.Evaluation","type":"module"},{"doc":"","ref":"Wanda.Executions.Evaluation.html#execute/6","title":"Wanda.Executions.Evaluation.execute/6","type":"function"},{"doc":"","ref":"Wanda.Executions.Evaluation.html#has_some_fact_gathering_error?/1","title":"Wanda.Executions.Evaluation.has_some_fact_gathering_error?/1","type":"function"},{"doc":"Schema of a persisted execution.","ref":"Wanda.Executions.Execution.html","title":"Wanda.Executions.Execution","type":"module"},{"doc":"","ref":"Wanda.Executions.Execution.html#changeset/2","title":"Wanda.Executions.Execution.changeset/2","type":"function"},{"doc":"","ref":"Wanda.Executions.Execution.html#t:t/0","title":"Wanda.Executions.Execution.t/0","type":"type"},{"doc":"","ref":"Wanda.Executions.Execution.Target.html","title":"Wanda.Executions.Execution.Target","type":"module"},{"doc":"Represents the evaluation of an expectation.","ref":"Wanda.Executions.ExpectationEvaluation.html","title":"Wanda.Executions.ExpectationEvaluation","type":"module"},{"doc":"","ref":"Wanda.Executions.ExpectationEvaluation.html#t:t/0","title":"Wanda.Executions.ExpectationEvaluation.t/0","type":"type"},{"doc":"Represents an error occurred during the evaluation of an expectation.","ref":"Wanda.Executions.ExpectationEvaluationError.html","title":"Wanda.Executions.ExpectationEvaluationError","type":"module"},{"doc":"","ref":"Wanda.Executions.ExpectationEvaluationError.html#t:t/0","title":"Wanda.Executions.ExpectationEvaluationError.t/0","type":"type"},{"doc":"Represents the result of an expectation.","ref":"Wanda.Executions.ExpectationResult.html","title":"Wanda.Executions.ExpectationResult","type":"module"},{"doc":"","ref":"Wanda.Executions.ExpectationResult.html#t:t/0","title":"Wanda.Executions.ExpectationResult.t/0","type":"type"},{"doc":"A fact is a piece of information that was gathered from a target.","ref":"Wanda.Executions.Fact.html","title":"Wanda.Executions.Fact","type":"module"},{"doc":"","ref":"Wanda.Executions.Fact.html#t:t/0","title":"Wanda.Executions.Fact.t/0","type":"type"},{"doc":"Fact with an error.","ref":"Wanda.Executions.FactError.html","title":"Wanda.Executions.FactError","type":"module"},{"doc":"","ref":"Wanda.Executions.FactError.html#t:t/0","title":"Wanda.Executions.FactError.t/0","type":"type"},{"doc":"Facts gathering functional core.","ref":"Wanda.Executions.Gathering.html","title":"Wanda.Executions.Gathering","type":"module"},{"doc":"Check if all the agents have sent the facts","ref":"Wanda.Executions.Gathering.html#all_agents_sent_facts?/2","title":"Wanda.Executions.Gathering.all_agents_sent_facts?/2","type":"function"},{"doc":"Adds gathered facts of an agent.","ref":"Wanda.Executions.Gathering.html#put_gathered_facts/3","title":"Wanda.Executions.Gathering.put_gathered_facts/3","type":"function"},{"doc":"Adds timeout data to gathered facts.","ref":"Wanda.Executions.Gathering.html#put_gathering_timeouts/2","title":"Wanda.Executions.Gathering.put_gathering_timeouts/2","type":"function"},{"doc":"Check if an agent is a target of an execution","ref":"Wanda.Executions.Gathering.html#target?/2","title":"Wanda.Executions.Gathering.target?/2","type":"function"},{"doc":"Represents the result of an execution.","ref":"Wanda.Executions.Result.html","title":"Wanda.Executions.Result","type":"module"},{"doc":"","ref":"Wanda.Executions.Result.html#t:t/0","title":"Wanda.Executions.Result.t/0","type":"type"},{"doc":"Represents the execution of the CheckSelection(s) on the target nodes/agents of a cluster Orchestrates facts gathering on the targets - issuing execution and receiving back facts - and following check evaluations.","ref":"Wanda.Executions.Server.html","title":"Wanda.Executions.Server","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"Wanda.Executions.Server.html#child_spec/1","title":"Wanda.Executions.Server.child_spec/1","type":"function"},{"doc":"","ref":"Wanda.Executions.Server.html#start_link/1","title":"Wanda.Executions.Server.start_link/1","type":"function"},{"doc":"Execution server API behaviour.","ref":"Wanda.Executions.ServerBehaviour.html","title":"Wanda.Executions.ServerBehaviour","type":"behaviour"},{"doc":"","ref":"Wanda.Executions.ServerBehaviour.html#c:receive_facts/4","title":"Wanda.Executions.ServerBehaviour.receive_facts/4","type":"callback"},{"doc":"","ref":"Wanda.Executions.ServerBehaviour.html#c:start_execution/4","title":"Wanda.Executions.ServerBehaviour.start_execution/4","type":"callback"},{"doc":"","ref":"Wanda.Executions.ServerBehaviour.html#c:start_execution/5","title":"Wanda.Executions.ServerBehaviour.start_execution/5","type":"callback"},{"doc":"State of an execution.","ref":"Wanda.Executions.State.html","title":"Wanda.Executions.State","type":"module"},{"doc":"","ref":"Wanda.Executions.State.html#t:t/0","title":"Wanda.Executions.State.t/0","type":"type"},{"doc":"Execution targets.","ref":"Wanda.Executions.Target.html","title":"Wanda.Executions.Target","type":"module"},{"doc":"","ref":"Wanda.Executions.Target.html#get_checks_from_targets/1","title":"Wanda.Executions.Target.get_checks_from_targets/1","type":"function"},{"doc":"","ref":"Wanda.Executions.Target.html#map_targets/1","title":"Wanda.Executions.Target.map_targets/1","type":"function"},{"doc":"","ref":"Wanda.Executions.Target.html#t:t/0","title":"Wanda.Executions.Target.t/0","type":"type"},{"doc":"Represents a Value used in expectation evaluation. This value has been already determined given the conditions in check definition.","ref":"Wanda.Executions.Value.html","title":"Wanda.Executions.Value","type":"module"},{"doc":"","ref":"Wanda.Executions.Value.html#t:t/0","title":"Wanda.Executions.Value.t/0","type":"type"},{"doc":"Function to interact with the checks catalog.","ref":"Wanda.Catalog.html","title":"Wanda.Catalog","type":"module"},{"doc":"Get the checks catalog with all checks","ref":"Wanda.Catalog.html#get_catalog/0","title":"Wanda.Catalog.get_catalog/0","type":"function"},{"doc":"Get a check from the catalog.","ref":"Wanda.Catalog.html#get_check/1","title":"Wanda.Catalog.get_check/1","type":"function"},{"doc":"Get specific checks from the catalog.","ref":"Wanda.Catalog.html#get_checks/1","title":"Wanda.Catalog.get_checks/1","type":"function"},{"doc":"Represents a check.","ref":"Wanda.Catalog.Check.html","title":"Wanda.Catalog.Check","type":"module"},{"doc":"","ref":"Wanda.Catalog.Check.html#t:t/0","title":"Wanda.Catalog.Check.t/0","type":"type"},{"doc":"Represents a condition.","ref":"Wanda.Catalog.Condition.html","title":"Wanda.Catalog.Condition","type":"module"},{"doc":"","ref":"Wanda.Catalog.Condition.html#t:t/0","title":"Wanda.Catalog.Condition.t/0","type":"type"},{"doc":"Represents an expectation.","ref":"Wanda.Catalog.Expectation.html","title":"Wanda.Catalog.Expectation","type":"module"},{"doc":"","ref":"Wanda.Catalog.Expectation.html#t:t/0","title":"Wanda.Catalog.Expectation.t/0","type":"type"},{"doc":"Represents a fact.","ref":"Wanda.Catalog.Fact.html","title":"Wanda.Catalog.Fact","type":"module"},{"doc":"","ref":"Wanda.Catalog.Fact.html#t:t/0","title":"Wanda.Catalog.Fact.t/0","type":"type"},{"doc":"Represents a value.","ref":"Wanda.Catalog.Value.html","title":"Wanda.Catalog.Value","type":"module"},{"doc":"","ref":"Wanda.Catalog.Value.html#t:t/0","title":"Wanda.Catalog.Value.t/0","type":"type"},{"doc":"Publishes messages to the message bus","ref":"Wanda.Messaging.html","title":"Wanda.Messaging","type":"module"},{"doc":"","ref":"Wanda.Messaging.html#publish/2","title":"Wanda.Messaging.publish/2","type":"function"},{"doc":"AMQP adapter","ref":"Wanda.Messaging.Adapters.AMQP.html","title":"Wanda.Messaging.Adapters.AMQP","type":"module"},{"doc":"AMQP consumer.","ref":"Wanda.Messaging.Adapters.AMQP.Consumer.html","title":"Wanda.Messaging.Adapters.AMQP.Consumer","type":"module"},{"doc":"","ref":"Wanda.Messaging.Adapters.AMQP.Consumer.html#child_spec/1","title":"Wanda.Messaging.Adapters.AMQP.Consumer.child_spec/1","type":"function"},{"doc":"","ref":"Wanda.Messaging.Adapters.AMQP.Consumer.html#start_link/1","title":"Wanda.Messaging.Adapters.AMQP.Consumer.start_link/1","type":"function"},{"doc":"AMQP processor.","ref":"Wanda.Messaging.Adapters.AMQP.Processor.html","title":"Wanda.Messaging.Adapters.AMQP.Processor","type":"module"},{"doc":"Callback implementation for GenRMQ.Processor.process/1 .","ref":"Wanda.Messaging.Adapters.AMQP.Processor.html#process/1","title":"Wanda.Messaging.Adapters.AMQP.Processor.process/1","type":"function"},{"doc":"AMQP publisher.","ref":"Wanda.Messaging.Adapters.AMQP.Publisher.html","title":"Wanda.Messaging.Adapters.AMQP.Publisher","type":"module"},{"doc":"","ref":"Wanda.Messaging.Adapters.AMQP.Publisher.html#child_spec/1","title":"Wanda.Messaging.Adapters.AMQP.Publisher.child_spec/1","type":"function"},{"doc":"Callback implementation for GenRMQ.Publisher.init/0 .","ref":"Wanda.Messaging.Adapters.AMQP.Publisher.html#init/0","title":"Wanda.Messaging.Adapters.AMQP.Publisher.init/0","type":"function"},{"doc":"","ref":"Wanda.Messaging.Adapters.AMQP.Publisher.html#publish_message/2","title":"Wanda.Messaging.Adapters.AMQP.Publisher.publish_message/2","type":"function"},{"doc":"","ref":"Wanda.Messaging.Adapters.AMQP.Publisher.html#start_link/1","title":"Wanda.Messaging.Adapters.AMQP.Publisher.start_link/1","type":"function"},{"doc":"Maps domain structures to integration events.","ref":"Wanda.Messaging.Mapper.html","title":"Wanda.Messaging.Mapper","type":"module"},{"doc":"","ref":"Wanda.Messaging.Mapper.html#from_execution_requested/1","title":"Wanda.Messaging.Mapper.from_execution_requested/1","type":"function"},{"doc":"","ref":"Wanda.Messaging.Mapper.html#from_facts_gathererd/1","title":"Wanda.Messaging.Mapper.from_facts_gathererd/1","type":"function"},{"doc":"","ref":"Wanda.Messaging.Mapper.html#to_execution_completed/1","title":"Wanda.Messaging.Mapper.to_execution_completed/1","type":"function"},{"doc":"","ref":"Wanda.Messaging.Mapper.html#to_facts_gathering_requested/4","title":"Wanda.Messaging.Mapper.to_facts_gathering_requested/4","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use WandaWeb , :controller use WandaWeb , :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"WandaWeb.html","title":"WandaWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"WandaWeb.html#__using__/1","title":"WandaWeb.__using__/1","type":"macro"},{"doc":"","ref":"WandaWeb.html#channel/0","title":"WandaWeb.channel/0","type":"function"},{"doc":"","ref":"WandaWeb.html#controller/0","title":"WandaWeb.controller/0","type":"function"},{"doc":"","ref":"WandaWeb.html#router/0","title":"WandaWeb.router/0","type":"function"},{"doc":"","ref":"WandaWeb.html#view/0","title":"WandaWeb.view/0","type":"function"},{"doc":"","ref":"WandaWeb.CatalogController.html","title":"WandaWeb.CatalogController","type":"module"},{"doc":"","ref":"WandaWeb.CatalogController.html#catalog/2","title":"WandaWeb.CatalogController.catalog/2","type":"function"},{"doc":"","ref":"WandaWeb.CatalogController.html#open_api_operation/1","title":"WandaWeb.CatalogController.open_api_operation/1","type":"function"},{"doc":"","ref":"WandaWeb.CatalogController.html#shared_security/0","title":"WandaWeb.CatalogController.shared_security/0","type":"function"},{"doc":"","ref":"WandaWeb.CatalogController.html#shared_tags/0","title":"WandaWeb.CatalogController.shared_tags/0","type":"function"},{"doc":"","ref":"WandaWeb.CatalogView.html","title":"WandaWeb.CatalogView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"WandaWeb.CatalogView.html#__resource__/0","title":"WandaWeb.CatalogView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"WandaWeb.CatalogView.html#render/2","title":"WandaWeb.CatalogView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"WandaWeb.CatalogView.html#template_not_found/2","title":"WandaWeb.CatalogView.template_not_found/2","type":"function"},{"doc":"This module defines the test case to be used by tests that require setting up a connection. Such tests rely on Phoenix.ConnTest and also import other functionality to make it easier to build common data structures and query the data layer. Finally, if the test case interacts with the database, we enable the SQL sandbox, so changes done to the database are reverted at the end of every test. If you are using PostgreSQL, you can even run database tests asynchronously by setting use WandaWeb.ConnCase, async: true , although this option is not recommended for other databases.","ref":"WandaWeb.ConnCase.html","title":"WandaWeb.ConnCase","type":"module"},{"doc":"","ref":"WandaWeb.Endpoint.html","title":"WandaWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"WandaWeb.Endpoint.html#broadcast/3","title":"WandaWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"WandaWeb.Endpoint.html#broadcast!/3","title":"WandaWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"WandaWeb.Endpoint.html#broadcast_from/4","title":"WandaWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"WandaWeb.Endpoint.html#broadcast_from!/4","title":"WandaWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"WandaWeb.Endpoint.html#call/2","title":"WandaWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"WandaWeb.Endpoint.html#child_spec/1","title":"WandaWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"WandaWeb.Endpoint.html#config/2","title":"WandaWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"WandaWeb.Endpoint.html#config_change/2","title":"WandaWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"WandaWeb.Endpoint.html#host/0","title":"WandaWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"WandaWeb.Endpoint.html#init/1","title":"WandaWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"WandaWeb.Endpoint.html#local_broadcast/3","title":"WandaWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"WandaWeb.Endpoint.html#local_broadcast_from/4","title":"WandaWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"WandaWeb.Endpoint.html#path/1","title":"WandaWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"WandaWeb.Endpoint.html#script_name/0","title":"WandaWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. Options :log_access_url - if the access url should be logged once the endpoint starts All other options are merged into the endpoint configuration.","ref":"WandaWeb.Endpoint.html#start_link/1","title":"WandaWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"WandaWeb.Endpoint.html#static_integrity/1","title":"WandaWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"WandaWeb.Endpoint.html#static_lookup/1","title":"WandaWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"WandaWeb.Endpoint.html#static_path/1","title":"WandaWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"WandaWeb.Endpoint.html#static_url/0","title":"WandaWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"WandaWeb.Endpoint.html#struct_url/0","title":"WandaWeb.Endpoint.struct_url/0","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"WandaWeb.Endpoint.html#subscribe/2","title":"WandaWeb.Endpoint.subscribe/2","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"WandaWeb.Endpoint.html#unsubscribe/1","title":"WandaWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"WandaWeb.Endpoint.html#url/0","title":"WandaWeb.Endpoint.url/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"WandaWeb.ErrorHelpers.html","title":"WandaWeb.ErrorHelpers","type":"module"},{"doc":"Translates an error message.","ref":"WandaWeb.ErrorHelpers.html#translate_error/1","title":"WandaWeb.ErrorHelpers.translate_error/1","type":"function"},{"doc":"","ref":"WandaWeb.ErrorView.html","title":"WandaWeb.ErrorView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"WandaWeb.ErrorView.html#__resource__/0","title":"WandaWeb.ErrorView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"WandaWeb.ErrorView.html#render/2","title":"WandaWeb.ErrorView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"WandaWeb.ErrorView.html#template_not_found/2","title":"WandaWeb.ErrorView.template_not_found/2","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html","title":"WandaWeb.ExecutionController","type":"module"},{"doc":"","ref":"WandaWeb.ExecutionController.html#index/2","title":"WandaWeb.ExecutionController.index/2","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html#open_api_operation/1","title":"WandaWeb.ExecutionController.open_api_operation/1","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html#shared_security/0","title":"WandaWeb.ExecutionController.shared_security/0","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html#shared_tags/0","title":"WandaWeb.ExecutionController.shared_tags/0","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html#show/2","title":"WandaWeb.ExecutionController.show/2","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionController.html#start/2","title":"WandaWeb.ExecutionController.start/2","type":"function"},{"doc":"","ref":"WandaWeb.ExecutionView.html","title":"WandaWeb.ExecutionView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"WandaWeb.ExecutionView.html#__resource__/0","title":"WandaWeb.ExecutionView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"WandaWeb.ExecutionView.html#render/2","title":"WandaWeb.ExecutionView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"WandaWeb.ExecutionView.html#template_not_found/2","title":"WandaWeb.ExecutionView.template_not_found/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.html","title":"WandaWeb.Router","type":"module"},{"doc":"","ref":"WandaWeb.Router.html#api/2","title":"WandaWeb.Router.api/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"WandaWeb.Router.html#call/2","title":"WandaWeb.Router.call/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"WandaWeb.Router.html#init/1","title":"WandaWeb.Router.init/1","type":"function"},{"doc":"Module with named helpers generated from WandaWeb.Router.","ref":"WandaWeb.Router.Helpers.html","title":"WandaWeb.Router.Helpers","type":"module"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#catalog_path/2","title":"WandaWeb.Router.Helpers.catalog_path/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#catalog_path/3","title":"WandaWeb.Router.Helpers.catalog_path/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#catalog_url/2","title":"WandaWeb.Router.Helpers.catalog_url/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#catalog_url/3","title":"WandaWeb.Router.Helpers.catalog_url/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_path/2","title":"WandaWeb.Router.Helpers.execution_path/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_path/3","title":"WandaWeb.Router.Helpers.execution_path/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_path/4","title":"WandaWeb.Router.Helpers.execution_path/4","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_url/2","title":"WandaWeb.Router.Helpers.execution_url/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_url/3","title":"WandaWeb.Router.Helpers.execution_url/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#execution_url/4","title":"WandaWeb.Router.Helpers.execution_url/4","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"WandaWeb.Router.Helpers.html#path/2","title":"WandaWeb.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#render_spec_path/2","title":"WandaWeb.Router.Helpers.render_spec_path/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#render_spec_path/3","title":"WandaWeb.Router.Helpers.render_spec_path/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#render_spec_url/2","title":"WandaWeb.Router.Helpers.render_spec_url/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#render_spec_url/3","title":"WandaWeb.Router.Helpers.render_spec_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"WandaWeb.Router.Helpers.html#static_integrity/2","title":"WandaWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"WandaWeb.Router.Helpers.html#static_path/2","title":"WandaWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"WandaWeb.Router.Helpers.html#static_url/2","title":"WandaWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#swagger_ui_path/2","title":"WandaWeb.Router.Helpers.swagger_ui_path/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#swagger_ui_path/3","title":"WandaWeb.Router.Helpers.swagger_ui_path/3","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#swagger_ui_url/2","title":"WandaWeb.Router.Helpers.swagger_ui_url/2","type":"function"},{"doc":"","ref":"WandaWeb.Router.Helpers.html#swagger_ui_url/3","title":"WandaWeb.Router.Helpers.swagger_ui_url/3","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"WandaWeb.Router.Helpers.html#url/1","title":"WandaWeb.Router.Helpers.url/1","type":"function"},{"doc":"Minimal information about an Execution accepted by the system, it carries the same identifiers provided by the consumer that requested the execution to start. These identifiers may be used to query the APIs about the state of an execution.","ref":"WandaWeb.Schemas.AcceptedExecutionResponse.html","title":"WandaWeb.Schemas.AcceptedExecutionResponse","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.AcceptedExecutionResponse.html#schema/0","title":"WandaWeb.Schemas.AcceptedExecutionResponse.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.AcceptedExecutionResponse.html#t:t/0","title":"WandaWeb.Schemas.AcceptedExecutionResponse.t/0","type":"type"},{"doc":"Checks catalog response API spec","ref":"WandaWeb.Schemas.CatalogResponse.html","title":"WandaWeb.Schemas.CatalogResponse","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.CatalogResponse.html#schema/0","title":"WandaWeb.Schemas.CatalogResponse.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.CatalogResponse.html#t:t/0","title":"WandaWeb.Schemas.CatalogResponse.t/0","type":"type"},{"doc":"Individual check of the catalog response API spec","ref":"WandaWeb.Schemas.CatalogResponse.Check.html","title":"WandaWeb.Schemas.CatalogResponse.Check","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.CatalogResponse.Check.html#schema/0","title":"WandaWeb.Schemas.CatalogResponse.Check.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.CatalogResponse.Check.html#t:t/0","title":"WandaWeb.Schemas.CatalogResponse.Check.t/0","type":"type"},{"doc":"Execution item response API spec","ref":"WandaWeb.Schemas.ExecutionResponse.html","title":"WandaWeb.Schemas.ExecutionResponse","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.ExecutionResponse.html#schema/0","title":"WandaWeb.Schemas.ExecutionResponse.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.ExecutionResponse.html#t:t/0","title":"WandaWeb.Schemas.ExecutionResponse.t/0","type":"type"},{"doc":"Execution list response API spec","ref":"WandaWeb.Schemas.ListExecutionsResponse.html","title":"WandaWeb.Schemas.ListExecutionsResponse","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.ListExecutionsResponse.html#schema/0","title":"WandaWeb.Schemas.ListExecutionsResponse.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.ListExecutionsResponse.html#t:t/0","title":"WandaWeb.Schemas.ListExecutionsResponse.t/0","type":"type"},{"doc":"The request to be sent to start an execution","ref":"WandaWeb.Schemas.StartExecutionRequest.html","title":"WandaWeb.Schemas.StartExecutionRequest","type":"module"},{"doc":"Callback implementation for OpenApiSpex.Schema.schema/0 .","ref":"WandaWeb.Schemas.StartExecutionRequest.html#schema/0","title":"WandaWeb.Schemas.StartExecutionRequest.schema/0","type":"function"},{"doc":"","ref":"WandaWeb.Schemas.StartExecutionRequest.html#t:t/0","title":"WandaWeb.Schemas.StartExecutionRequest.t/0","type":"type"},{"doc":"A service responsible to orchestrate Checks executions on a target infrastructure.","ref":"readme.html","title":"Wanda","type":"extras"},{"doc":"Wanda architecture aims to simplify testing Checks Executions and adding new ones . Infrastructure A docker-compose setup is provided to enable seamless experience with the system. Starting a local environment Start the required infrastructure (see docker-compose.checks.yaml ) $ docker-compose -f docker-compose.checks.yaml up -d Wanda is exposed on port 4000 and the API documentation is available at http://localhost:4000/swaggerui Note that the message broker must be reachable by wanda and all the targets. Testing Executions With a runnig setup it is possible to easily test Checks and their Execution by: consulting the catalog starting a Checks Execution checking up the state of the started execution Consulting the catalog Available Checks are part of the Catalog , and they can be retrieved by accessing the dedicated API curl -X &#39;GET&#39; \\ &#39;http://localhost:4000/api/checks/catalog&#39; \\ -H &#39;accept: application/json&#39; Starting a Checks Execution A Checks Execution can be started by calling the Start Execution endpoint, as follows curl --request POST &#39;http://localhost:4000/api/checks/executions/start&#39; \\ --header &#39;accept: application/json&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{ &quot;env&quot;: { &quot;provider&quot;: &quot;azure&quot; }, &quot;execution_id&quot;: &quot;205e326d-0c25-4f4b-9976-43f9ba1c86d3&quot;, &quot;group_id&quot;: &quot;3dff9d03-4adf-453e-9513-8533e221bb12&quot;, &quot;targets&quot;: [ { &quot;agent_id&quot;: &quot;a644919a-d953-43d4-bd57-7e0bb96ee894&quot;, &quot;checks&quot;: [ &quot;156F64&quot; ] }, { &quot;agent_id&quot;: &quot;02d99b2f-0efd-443c-ac9c-32710323f620&quot;, &quot;checks&quot;: [ &quot;OTH3R1&quot; ] } ] }&#39; execution_id must be new and unique for every new execution. If an already used execution_id is provided, starting the execution fails. In order to get the detailed information for an execution see Getting Execution details . Please note that execution is eventually started , meaning that a successful response to the previous API call does not guarantee that the execution is running, but that it has been accepted by the system to start. Getting Execution details To get detailed information about the execution, the following API can be used. curl --request GET &#39;http://localhost:4000/api/checks/executions/205e326d-0c25-4f4b-9976-43f9ba1c86d3&#39; \\ --header &#39;accept: application/json&#39; \\ --header &#39;Content-Type: application/json&#39; Note that calling the execution detail API right after starting an execution might result in a 404 not found , because the execution, as mentioned, is eventually started . In this case retry getting the detail of the execution. Refer to the API doc for more information about requests and responses. Adding new Checks Built-in Checks can be found in the Catalog directory at ./priv/catalog/ In order to implement new checks and test them: write a new Check Specification file locate the newly created Check in the Catalog directory ./priv/catalog/ test the execution as previously described","ref":"readme.html#developing-checks","title":"Wanda - Developing Checks","type":"extras"},{"doc":"","ref":"changelog.html","title":"CHANGELOG","type":"extras"},{"doc":"Thanks for showing interest and sharing your time to contribute to this project! This guide is meant to be used as a general guideline for creating issues or pull requests. We encourage all first-time contributors to give this a read to avoid common mistakes and improve the quality of all contributions.","ref":"contributing.html","title":"How to contribute","type":"extras"},{"doc":"Before creating a new issue make sure you use the search functionality to confirm that a similar issue doesn't already exist. Next, make sure you properly label the issue as per our labels If you are reporting a bug , please share a file generated using the trento-support.sh script with the following params: # trento-support.sh --collect all --output file-tgz and include the output in your issue. The script should remove sensitive data automatically but please make sure you are not sharing any sensitive data of your own.","ref":"contributing.html#opening-issues","title":"How to contribute - Opening issues","type":"extras"},{"doc":"Always refer to the docs repository for coding standards and general guidelines. Pull Requests guideline Reviews are hard. These few points will help us to reduce the time and effort required and allow us to merge your changes faster. Only touch relevant files. We have a PR template to aid you in completing the required details. Be sure to complete it and remove the non-relevant parts. Keep PRs as small as possible. When the PR gets too big, consider splitting it into multiple parts. A PR should ideally be between 100 and 500 additions. Check that the tests are passing. Check that your code is not generating new warnings. Check that any dependent changes have been merged and published in downstream modules Commit history should be short and group changes that otherwise wouldn't make sense on their own. Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this: git commit - m &quot;A brief summary of the commit A paragraph describing what changed and its impact.&quot; Write a detailed description that gives context and explains why you are creating the PR. If the PR adds functionality, please add some tests and documentation to support it. Each PR needs 1 approval to be merged. Select a reviewer in particular if you are looking for specific feedback from someone. Reviewers guideline Opinionated comments are welcome but don't expect them always to be addressed. Be ready for discussion but also open to conceding. To avoid scope creep, consider proposing subsequent PRs rather than requesting changes for the current PR you are reviewing. Short, concise comments with examples are the most valuable.","ref":"contributing.html#submitting-changes","title":"How to contribute - Submitting changes","type":"extras"},{"doc":"A language allowing to declare best practices to be adhered on target SAP Infrastructures.","ref":"specification.html","title":"Checks Specification","type":"extras"},{"doc":"The need this Specification aims to fulfill is to provide users a simple way to declare what we (the Trento Team) often refer to as &quot;Checks&quot;. Checks are, in Trento's domain, the crystallization of SUSE's best practices when it comes to SAP workloads in a form that both a user ( Spec ) and a machine ( Execution ) can read. [^1]: The Trento Team from now on.","ref":"specification.html#introduction","title":"Checks Specification - Introduction","type":"extras"},{"doc":"Checks Execution is the process that determines whether the best practices defined in the Checks Specifications are being followed on a target infrastructure. Requesting an Execution -&gt; Facts Gathering -&gt; Expectation Evaluation Requesting an Execution An Execution can be requested to start by providing Wanda the following information: an execution identifier an execution Group identifier the Checks Selection for the targets (a list of checks to be executed on the targets) When the Execution starts running, its current state is stored in the Database and the targets are notified - via the message broker - about Facts to be gathered. Then the Execution waits for the Facts Gathering to complete. Facts Gathering After an Execution Request the targets are notified about the facts they need to gather . Whenever a target has gathered all the needed facts for an Execution , it notifies Wanda - via the message broker - about the Gathered Facts . Expectation Evaluation Expectation Evaluation is the process of evaluating the Expectations using the received Gathered Facts to obtain the result of a check. This will only happen once Gathered Facts are received from all the targets . After the result has been determined, the currently running Execution transitions to completed and its new state is tracked on the Database. At this point the Execution is considered Completed and interested parties are notified about the Execution Completion. Checks Results Once an execution is completed, a checks result should give feedback on what aspects of a target infrastructure adhere to the best practices and which don't. Possible results: passing , everything ok warning , best practice not followed, should fix critical , best practice not followed, must fix See also Check Severity .","ref":"specification.html#checks-execution","title":"Checks Specification - Checks Execution","type":"extras"},{"doc":"A Check declaration comes in the form of a yaml file and all the Checks together build up the Checks Catalog Here's an example: id: 156F64 name: Corosync `token` timeout group: Corosync description: Corosync `token` timeout is set to the correct value remediation: | ## Abstract The value of the Corosync `token` timeout is not set as recommended. ## Remediation Adjust the corosync `token` timeout as recommended... facts: - name: corosync_token_timeout gatherer: corosync.conf argument: totem.token values: - name: expected_token_timeout default: 5000 conditions: - value: 30000 when: env.provider == &quot;azure&quot; || env.provider == &quot;aws&quot; - value: 20000 when: env.provider == &quot;gcp&quot; expectations: - name: token_timeout expect: facts.corosync_token_timeout == values.expected_token_timeout Filename Convention Note that a Check's filename MUST be in the form &lt;check_id&gt;.yaml (ie: 156F64.yaml ) Structure Following are listed the top level properties of a Check definition yaml. Key Required/Not Required Details ----------------------------- --------------------- ------------------------------------------ id required see more name required see more group required see more description required see more remediation required see more severity not required see more facts required see more values not required see more expectations required see more id Uniquely identifies a Check in the Catalog ie: id: 156F64 id: 845CC9 id: B089BE name A, preferably one-line, string representing the name for the Check being declared. ie: name: Corosync `token` timeout name: Corosync `consensus` timeout name: SBD Startmode group A, preferably one-line, string representing the group where the Check being declared belongs. Example: group: Corosync group: Pacemaker group: SBD description A text providing a description for the Check being declared. can be a one-liner description: Some plain description can be a multiline text description: | Some plain multiline description that carries a lot of information format is markdown description: | A `description` is a **markdown** remediation A text providing an comprehensive description about the remediation to apply for the Check being declared. It has the same properties of the description can be a one-liner (it usually is not) can be a multiline (it usually is) format is markdown Example: remediation: | ## Abstract The value of the Corosync `token` timeout is not set as recommended. ## Remediation Adjust the corosync `token` timeout as recommended on the best ... 2. Reload the corosync configuration: ... severity A string determining the severity of the Check being declared, in case the check is not passing, so that the appropriate result is reported. Allowed values: warning , critical Default: if no severity is provided, the system would default to critical Example: Reports a warning When the Check expectations do not pass severity: warning Reports a critical When the Check expectations do not pass severity: critical Facts, Values, Expectations See main sections Facts , Values , Expectations","ref":"specification.html#anatomy-of-a-check","title":"Checks Specification - Anatomy of a Check","type":"extras"},{"doc":"Facts are the core data on which the engine evaluates the state of the target infrastructure. Examples include (but are not limited to) installed packages, cluster state, and configuration files content. The process of determining the value of a declared fact during Check execution is referred to as Facts Gathering and it is the responsibility of the Gatherers . Gatherers could be seen as functions that have a name and accept argument(s). That said, a fact declaration contains: the fact name the gatherer used to retrieve the fact the argument(s) to be provided to the gatherer Note: many facts can be declared all the declared facts would be registered in the facts namespaced evaluation scope. facts: - name: &lt;fact_name&gt; gatherer: &lt;gatherer_name&gt; argument: &lt;gatherer_argument&gt; - name: &lt;another_fact_name&gt; gatherer: &lt;another_gatherer_name&gt; argument: &lt;another_gatherer_argument&gt; The following example declares a fact named corosync_token_timeout , retrievable via the built-in corosync.conf gatherer to which will be provided the argument totem.token facts: - name: corosync_token_timeout gatherer: corosync.conf argument: totem.token # other facts maybe Finally, gathered facts, are used in Check's Expectations to determine whether expected conditions are met for the best practice to be adhered.","ref":"specification.html#facts","title":"Checks Specification - Facts","type":"extras"},{"doc":"Values are named variables that may evaluate differently based on the execution context and are used with Facts for Contextual Expectations Evaluation. When contextual expectations is not needed, there's the following options available: use hardcoded values define values as constants Scenario: No matter what the context is, the fact awesome_fact MUST always be wanda Hardcoded Values Direct usage of a simple hardcoded value expectations: - name: awesome_expectation expect: facts.awesome_fact == &quot;wanda&quot; Constant Values Define a Value with only the default specified ( omitting conditions ) for constants regardless of the context. values: - name: awesome_constant_value default: &quot;wanda&quot; expectations: - name: awesome_expectation expect: facts.awesome_fact == values.awesome_constant_value Contextual Values This is needed because the same check might expect facts to be treated differently based on the context. Let's clarify with an example: A Check might define a fact named awesome_fact which is expected to be different given the color of the execution. it has to be cat when the color in the execution context is red it has to be dog when the color in the execution context is blue it has to be rabbit in all other cases, regardless of the execution context so we define a named variable awesome_expectation that resolves to cat|dog|rabbit when proper conditions are met allowing us to have an expectation like this expect: facts.awesome_fact == values.awesome_expectation A Value declaration contains: the value name the default value a list of conditions that determine the value given the context (optional, see constant values ) values: - name: &lt;value_name&gt; default: &lt;default_value&gt; conditions: - value: &lt;value_on_condition_a&gt; when: &lt;expression_a&gt; - value: &lt;value_on_condition_b&gt; when: &lt;expression_b&gt; It could read as: the value named &lt;value_name&gt; resolves to &lt;value_on_condition_a&gt; when &lt;expression_a&gt; is true &lt;value_on_condition_b&gt; when &lt;expression_b&gt; is true &lt;default_value&gt; in all other cases Example: Check 156F64 Corosync token timeout is set to expected value defines a fact corosync_token_timeout which is expected to be different given the platform (aws/azure/gcp), so we define a named variable expected_token_timeout resolving to the appropriate value. expected_token_timeout resolves to: 30000 when azure / aws are detected 20000 on gcp 5000 in all other cases (ie: bare metal, VMs...) values: - name: expected_token_timeout default: 5000 conditions: - value: 30000 when: env.provider == &quot;azure&quot; || env.provider == &quot;aws&quot; - value: 20000 when: env.provider == &quot;gcp&quot; expectations: - name: corosync_token_timeout_is_correct expect: facts.corosync_token_timeout == values.expected_token_timeout Note that conditions is a cascading chain of contextual inspection to determine which is the resolved value. there may be many conditions first condition that passes determines the value, following are not evaluated when entry Expression has access to gathered facts and env evaluation scopes All the resolved declared values would be registered in the values namespaced evaluation scope.","ref":"specification.html#values","title":"Checks Specification - Values","type":"extras"},{"doc":"Expectations are assertions on the state of a target infrastructure for a given scenario. By using fact and values they are able to determine if a check passes or not. An Expectation declaration contains: the expectation name the expectation expression itself with access to gathered facts , resolved values and the environment expectations: - name: &lt;expectation_name&gt; expect: &lt;expectation_expression&gt; - name: &lt;another_expectation_name&gt; expect: &lt;another_expectation_expression&gt; - name: &lt;yet_another_expectation_name&gt; expect_same: &lt;yet_another_expectation_expression&gt; Extra considerations: there can be many expectations for a single Check an expectation can be one of two types expect or expect_same a Check passes when all the expectations are satisfied Example expectations: - name: token_timeout expect: facts.corosync_token_timeout == values.expected_token_timeout - name: awesome_expectation expect: facts.awesome_fact == values.awesome_expected_value In the previous example a Checks passes (is successful) if all expectations are met, meaning that facts . corosync_token_timeout == values . expected_token_timeout AND facts . awesome_fact == values . awesome_expected_value expect This type of expectation is satisfied when, after facts gathering, the expression is true for all the targets involved in the current execution. Execution Scenario: 2 targets [ A , B ] selected Checks [ corosync_check ] some environment (context) facts: - name: corosync_token_timeout gatherer: corosync.conf argument: totem.token values: ... expectations: - name: corosync_token_timeout_is_correct expect: facts.corosync_token_timeout == values.expected_token_timeout Considering the previous scenario what happens is that: the fact corosync_token_timeout is gathered on all targets ( A and B in this case) the expectation expression gets executed against the corosync_token_timeout fact gathered on every targets. targetA.corosync_token_timeout == values.expected_token_timeout targetB.corosync_token_timeout == values.expected_token_timeout every evaluation has to be true expect_same This type of expectation is satisfied when, after facts gathering, the expression's return value is the same for all the targets involved in the current execution, regardless of the value itself. Execution Scenario: 2 targets [ A , B , C ] selected Checks [ some_check ] some environment (context) expectations: - name: awesome_expectation expect_same: facts.awesome_fact Considering the previous scenario what happens is that: the fact awesome_fact is gathered on all targets ( A , B and C in this case) the expectation expression gets executed for every target involved. targetA.facts.awesome_fact targetB.facts.awesome_fact targetC.facts.awesome_fact the expressions results has to be the same for every target targetA.facts.awesome_fact == targetB.facts.awesome_fact == targetC.facts.awesome_fact Example: RPM version must be the same on all the targets, regardless of what version it is facts: - name: installed_rpm_version gatherer: package_version argument: rpm expectations: - name: installed_rpm_version_must_be_the_same_on_all_targets expect_same: facts.installed_rpm_version","ref":"specification.html#expectations","title":"Checks Specification - Expectations","type":"extras"},{"doc":"Different parts of the Check declaration are places where an evaluation is needed. Determine to what a value resolves during execution when: &lt;expression&gt; part of a Value's condition values: - name: expected_token_timeout default: 5000 conditions: - value: 30000 when: env.provider == &quot;azure&quot; || env.provider == &quot;aws&quot; - value: 20000 when: env.provider == &quot;gcp&quot; Defining the Expectation of a Check expect|expect_same: &lt;expression&gt; expectations: - name: token_timeout expect: facts.corosync_token_timeout == values.expected_token_timeout See reference for the Expression Language . Evaluation Scope Every expression has access to an evaluation scope, allowing to access relevant piece of information to run the expression. Scopes are namespaced and access to items in the scope is name based. env env is a map of information about the context of the running execution, it is set by the system on each execution/check compilation. Examples of entries in the scope. What is actually available during the execution depends on the scenario. | name | Type | ----------------------------- | ------------------------------------------------------- | env.provider | one of azure , aws , gcp , kvm , nutanix , unknown facts facts is the map of the gathered facts, thus the scope varies based on which facts have been declared in the relative section , and are accessible in other sections by fact name. facts: - name: an_interesting_fact gatherer: &lt;some_gatherer&gt; argument: &lt;some_argument&gt; - name: another_interesting_fact gatherer: &lt;another_gatherer_name&gt; argument: &lt;another_gatherer_argument&gt; Available entries in scope, the value is what has been gathered on the targets | name | ----------------------------- | facts.an_interesting_fact | facts.another_interesting_fact values values is the map of resolved variable names defined in the relative section values: - name: expected_token_timeout default: 5000 conditions: - value: 30000 when: env.provider == &quot;azure&quot; || env.provider == &quot;aws&quot; - value: 20000 when: env.provider == &quot;gcp&quot; - name: another_variable_value default: &quot;blue&quot; conditions: - value: &quot;red&quot; when: env.should_be_red == true Available entries in scope | name | Resolved to | ------------------------------- | ------------------------------------------------------- | values.expected_token_timeout | 5000 , 30000 , 20000 based on the conditions | values.another_variable_value | blue , red based on the conditions","ref":"specification.html#expression-language","title":"Checks Specification - Expression Language","type":"extras"},{"doc":"A small, fast, easy-to-use scripting language and evaluation engine.","ref":"expression_language.html","title":"Expression Language","type":"extras"},{"doc":"An embedded scripting language and evaluation engine for Trento Checks Expressions that gives a safe and easy way to script specific steps during Checks Execution.","ref":"expression_language.html#introduction","title":"Expression Language - Introduction","type":"extras"},{"doc":"Type Example Nothing/void/nil/null/Unit () Integer 42 , 123 Float 123.4567 Boolean true or false String &quot;hello&quot; Array [ 1, 2, 3, &quot;foobar&quot; ] Map \#{ &quot;a&quot;: 1, &quot;b&quot;: true }","ref":"expression_language.html#types","title":"Expression Language - Types","type":"extras"},{"doc":"Operator Description&lt;br/&gt;( x operator y ) x , y same type or are numeric x , y different types == x is equals to y error if not defined false if not defined != x is not equals to y error if not defined true if not defined &gt; x is greater than y error if not defined false if not defined &gt;= x is greater than or equals to y error if not defined false if not defined &lt; x is less than y error if not defined false if not defined &lt;= x is less than or equals to y error if not defined false if not defined Comparing different types defaults to false Comparing two values of different data types defaults to false . The exception is != (not equals) which defaults to true . This is in line with intuition. 42 &gt; &quot;42&quot;; // false: i64 cannot be compared with string 42 &lt;= &quot;42&quot;; // false: i64 cannot be compared with string ts == 42; // false: different types cannot be compared ts != 42; // true: different types cannot be compared Boolean Operators Operator Description Arity Short-circuits? ! (prefix) NOT unary no &amp;&amp; AND binary yes &amp; AND binary no &lt;code&gt;||&lt;/code&gt; OR binary yes &lt;code&gt;|&lt;/code&gt; OR binary no Double boolean operators &amp;&amp; and || short-circuit &amp;ndash; meaning that the second operand will not be evaluated if the first one already proves the condition wrong. Single boolean operators &amp; and | always evaluate both operands. a() || b(); // b() is not evaluated if a() is true a() &amp;&amp; b(); // b() is not evaluated if a() is false a() | b(); // both a() and b() are evaluated a() &amp; b(); // both a() and b() are evaluated","ref":"expression_language.html#logic-operators-and-boolean","title":"Expression Language - Logic Operators and Boolean","type":"extras"},{"doc":"if statements follow C syntax. if foo(x) { print(&quot;It's true!&quot;); } else if bar == baz { print(&quot;It's true again!&quot;); } else if baz.is_foo() { print(&quot;Yet again true.&quot;); } else if foo(bar - baz) { print(&quot;True again... this is getting boring.&quot;); } else { print(&quot;It's finally false!&quot;); } Unlike C, the condition expression does not need to be enclosed in parentheses ( ... ) , but all branches of the if statement must be enclosed within braces { ... } , even when there is only one statement inside the branch. Like Rust, there is no ambiguity regarding which if clause a branch belongs to. // not C! if (decision) print(42); // ^ syntax error, expecting '{' If Expression if statements can also be used as expressions , replacing the ? : conditional operators in other C-like languages. // The following is equivalent to C: int x = 1 + (decision ? 42 : 123) / 2; let x = 1 + if decision { 42 } else { 123 } / 2; x == 22; let x = if decision { 42 }; // no else branch defaults to '()' x == ();","ref":"expression_language.html#if-statement","title":"Expression Language - If Statement","type":"extras"},{"doc":"All elements stored in an array are dynamic, and the array can freely grow or shrink with elements added or removed. Array literals are built within square brackets [ ... ] and separated by commas , : [ value , value , ... , value ] [ value , value , ... , value , ] // trailing comma is OK let some_list = [1, 2, 3]; let another_list = [&quot;foo&quot;, &quot;bar&quot;, 42]; Access Element From beginning Like C, arrays are accessed with zero-based, non-negative integer indices: array [ index position from 0 to length−1 ] let some_list = [&quot;foo&quot;, &quot;bar&quot;, 42]; let second_element = some_list[1]; // second_element is &quot;bar&quot; Access Element From end A negative position accesses an element in the array counting from the end , with −1 being the last element. array [ index position from −1 to −length ] let some_list = [&quot;foo&quot;, &quot;bar&quot;, 42]; let second_element = some_list[-2]; let last_element = some_list[-1]; // second_element is &quot;bar&quot; // last_element is 42 Function Parameter(s) Description get position, counting from end if &lt; 0 gets a copy of the element at a certain position ( () if the position is not valid) len none returns the number of elements filter predicate (usually a closure) constructs a new array with all items that return true when called with the predicate function taking the following parameters:&lt;ol&gt;&lt;li&gt;array item&lt;/li&gt;&lt;li&gt; (optional) offset position&lt;/li&gt;&lt;/ol&gt; all predicate (usually a closure) returns true if all items return true when called with the predicate function taking the following parameters:&lt;ol&gt;&lt;li&gt;array item&lt;/li&gt;&lt;li&gt; (optional) offset position&lt;/li&gt;&lt;/ol&gt; Examples let some_list = [1, 2, 3, 4, &quot;foo&quot;, &quot;bar&quot;]; let foo = some_list.get(4); // &quot;foo&quot; let items_count = some_list.len(); // 6 let only_foo_and_bar = some_list.filter(|item| item == &quot;foo&quot; || item == &quot;bar&quot;); // [&quot;foo&quot;, &quot;bar&quot;] // let only_foo_and_bar = some_list.filter(|item, idex_in_array| item == &quot;foo&quot; || item == &quot;bar&quot;); let another_list = [3, 5, 7, 9, 10, 20, 30]; let all_greater_than_2 = another_list.all(|item| item &gt; 2); // true let all_greater_than_10 = another_list.all(|item| item &gt; 10); // false // let all_greater_than_10 = another_list.all(|item, idex_in_array| item &gt; 10);","ref":"expression_language.html#arrays","title":"Expression Language - Arrays","type":"extras"},{"doc":"Maps are hash dictionaries. Properties are all dynamic values and can be freely added and retrieved. Map literals are built within braces \#{ ... } with name : value pairs separated by commas , : \#{ property : value , ... , property : value } \#{ property : value , ... , property : value , } // trailing comma is OK let some_map = \#{ // map literal with 2 properties foo: 42, bar: &quot;hello&quot;, }; Dot notation The dot notation allows to access properties by name. object . property let some_map = \#{ // map literal with 2 properties foo: 42, bar: &quot;hello&quot;, }; some_map.foo // 42 some_map.bar // &quot;hello&quot; Non-existing property Trying to read a non-existing property returns an error. let some_map = \#{ // map literal with 2 properties foo: 42, bar: &quot;hello&quot;, }; some_map.another_property // returns &quot;Property not found: another_property (line X, position Y)&quot; A more complex example let some_map = \#{ // map literal with 2 properties foo: 42, bar: &quot;hello&quot;, rabbits: [ \#{ name: &quot;wanda&quot;, power: 9001 }, \#{ name: &quot;tonio&quot;, power: 9002 }, \#{ name: &quot;weak_rabbit&quot;, power: 8999 } ] }; // Tell me how many strong rabbits are there let strong_rabbits = some_map.rabbits.filter(|rabbit| rabbit.power &gt; 9000).len() // 2 let rabbits = some_map.rabbits let all_rabbits_are_strong = rabbits.all(|rabbit| rabbit.power &gt; 9000) // false, unfortunately","ref":"expression_language.html#maps","title":"Expression Language - Maps","type":"extras"},{"doc":"For extra information about the underlying scripting language see Rhai .","ref":"expression_language.html#rhai","title":"Expression Language - Rhai","type":"extras"},{"doc":"","ref":"gatherers.html","title":"Gatherers","type":"extras"},{"doc":"Gatherers can be thought of as functions: they have a name they accept argument(s) they return a value, the gathered Fact Facts Gathering process in a nutshell fact = gatherer ( argument )","ref":"gatherers.html#introduction","title":"Gatherers - Introduction","type":"extras"},{"doc":"Here's a collection of build-in gatherers, with information about how to use them. name implementation corosync.conf trento-project/agent/../gatherers/corosyncconf.go hosts trento-project/agent/../gatherers/hostsfile.go package_version trento-project/agent/../gatherers/packageversion.go sbd_config trento-project/agent/../gatherers/sbd.go systemd trento-project/agent/../gatherers/systemd.go corosync.conf This gatherer allows accessing information contained in /etc/corosync/corosync.conf corosync_related_fact = corosync . conf ( some . argument ) Sample arguments | Name | Return value | ------------------------------------ | -------------------------------------- | totem.token | extracted value from the config | totem.join | extracted value from the config | nodelist.node.&lt;node_index&gt;.nodeid | extracted value from the config | nodelist.node | list of objects representing the nodes Specification examples: facts: - name: corosync_token_timeout gatherer: corosync.conf argument: totem.token - name: corosync_join gatherer: corosync.conf argument: totem.join - name: corosync_node1id gatherer: corosync.conf argument: nodelist.node.0.nodeid - name: corosync_node2id gatherer: corosync.conf argument: nodelist.node.1.nodeid - name: corosync_nodes gatherer: corosync.conf argument: nodelist.node For extra information refer to trento-project/agent/../gatherers/corosyncconf_test.go hosts (/etc/hosts) This gatherer allows accessing the hostnames that are resolvable through /etc/hosts . It does not use domain resolution in any way but instead directly parses the file. It allows one argument to be specified or none at all: When a hostname is provided as an argument, the gatherer will return an array of IPv4 and/or IPv6 addresses. When no argument is provided, the gatherer will return a map with hostname as keys and arrays with IPv4 and/or IPv6 addresses. Sample arguments | name | Return value | ------------------------------------ | -------------------------------------------------------- | localhost | list of IPs resolving localhost e.g. [&quot;127.0.0.1&quot;, &quot;::1&quot;] | node1 | list of IPs resolving node1 e.g. [&quot;172.22.0.1&quot;] | no argument provided | map with hostnames and IP addresses e.g. {&quot;localhost&quot;: [&quot;127.0.0.1&quot;, &quot;::1&quot;], &quot;node1&quot;: [&quot;172.22.0.1&quot;]} Specification examples: facts: - name: hosts_node1 gatherer: hosts argument: node1 - name: hosts_node2 gatherer: hosts argument: node2 - name: hsots_all gatherer: hosts For more information refer to trento-project/agent/../gatherers/hostsfile_test.go package_version This gatherer returns the version as a string of the specified package Sample arguments | Name | Return value | ---------------------- | ------------------------------------------------------------------------------------- | corosync | a string containing the installed version for the package package_name , e.g &quot;2.4.5&quot; Specification examples: facts: - name: corosync_version gatherer: package_version argument: corosync - name: pacemaker_version gatherer: package_version argument: pacemaker ... For extra information refer to trento-project/agent/../gatherers/packageversion_test.go sbd_config This gatherer allows accessing information contained in /etc/sysconfig/sbd Sample arguments | Name | Return value | ------------------------------------ | ------------------------------------------ | SBD_PACEMAKER | extracted value from the config (e.g. yes ) | SBD_STARTMODE | extracted value from the config (e.g. always ) | SBD_DEVICE | extracted value from the config (e.g. /dev/vdc;/dev/vdb ) Specification examples: - name: sbd_pacemaker gatherer: sbd_config argument: SBD_PACEMAKER - name: sbd_startmode gatherer: sbd_config argument: SBD_STARTMODE - name: sbd_device gatherer: sbd_config argument: SBD_DEVICE For extra information refer to trento-project/agent/../gatherers/sbd_test.go systemd Gather systemd daemons state. It returns an active/inactive string. If the daemon is disabled or does not even exist, inactive is returned. - name: sbd_state gatherer: systemd argument: sbd - name: corosync_state gatherer: systemd argument: corosync For extra information refer to trento-project/agent/../gatherers/systemd_test.go","ref":"gatherers.html#available-gatherers","title":"Gatherers - Available Gatherers","type":"extras"}]